#Test cases for function def print_sorted(self): that prints the list,
# but sorted (ascending sort)

import function

MyList = __import__('1-my_list').MyList

case 0: a character inside the list

>>> list = MyList([5,2,'g',4])
>>> list.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x0A-python-inheritance/1-my_list.py", line 4, in print_sorted
    print(sorted(self))
TypeError: unorderable types: str() < int()

case 1: only one character passed

>>> list = MyList(['g'])
>>> list.print_sorted()
['g']

case 2: a list of characters passed

>>> list = MyList(['g', 'v', 'r'])
>>> list.print_sorted()
['g', 'r', 'v']

case 3: a tuple inside the list passed

>>> list = MyList([(1,2)])
>>> list.print_sorted()
[(1, 2)]

case 4: a tuple and a int inside the list

>>> list = MyList([(1,2), 1])
>>> list.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x0A-python-inheritance/1-my_list.py", line 4, in print_sorted
    print(sorted(self))
TypeError: unorderable types: int() < tuple()

case 5: a dictionary inside the list

>>> list = MyList([{'dict': 'inside'}])
>>> list.print_sorted()
[{'dict': 'inside'}]

case 6: a dictionary and an int inside the list

>>> list.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x0A-python-inheritance/1-my_list.py", line 4, in print_sorted
    print(sorted(self))
TypeError: unorderable types: int() < dict()

case 7: a set inside the list

>>> list = MyList([{3}])
>>> list.print_sorted()
[{3}]

case 8: a set and an int inside the list

>>> list = MyList([{3}, 3])
>>> list.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x0A-python-inheritance/1-my_list.py", line 4, in print_sorted
    print(sorted(self))
TypeError: unorderable types: int() < set()

case 9: a set of integers passed

>>> list = MyList({3,4,8,9,3,5})
>>> list.print_sorted()
[3, 4, 5, 8, 9]

case 10: a tuple of integers passed

>>> list = MyList((3,4,8,9,3,5))
>>> list.print_sorted()
[3, 3, 4, 5, 8, 9]

case 11: a tuple of integers and a char passed

>>> list = MyList((3,4,8,'d',3,5))
>>> list.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x0A-python-inheritance/1-my_list.py", line 4, in print_sorted
    print(sorted(self))
TypeError: unorderable types: str() < int()

case 12: a dict of integers passed

>>> list = MyList({3: 2, 6: 3,1: 5, 2: 6})
>>> list.print_sorted()
[1, 2, 3, 6]

case 12: a dict of integers with one string passed 

>>> list = MyList({3: 2, 6: 3,'foo': 5, 2: 6})
>>> list.print_sorted()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/vagrant/holbertonschool-higher_level_programming/0x0A-python-inheritance/1-my_list.py", line 4, in print_sorted
    print(sorted(self))
TypeError: unorderable types: str() < int()

case 13: a string passed

>>> list = MyList("string")
>>> list.print_sorted()
['g', 'i', 'n', 'r', 's', 't']

case 14: a name passed

>>> list = MyList(nostring)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'nostring' is not defined

